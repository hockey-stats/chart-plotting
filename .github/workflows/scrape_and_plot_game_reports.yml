name: Scrape and Plot Game Report
on:
  workflow_call:
    inputs:
      last_game_id:
        description: Game ID for the most recent game reported on.
        type: string
    outputs:
      plot_artifact_name:
        value: ${{ jobs.plot-graphs.outputs.plot_artifact_name }}
      game_id:
        value: ${{ jobs.plot-graphs.outputs.game_id }}

env: 
  DATA_ARTIFACT_NAME: 'game-data'
  PLOTS_ARTIFACT_NAME: 'game-plot'

jobs:
#############
#############
  plot-graphs:

    runs-on: ubuntu-latest

    env: 
      MOTHERDUCK_TOKEN: ${{ secrets.MOTHERDUCK_TOKEN_READ_ONLY }}
      LAST_GAME: ${{ inputs.last_game_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: hockey-stats/chart-plotting

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install requirements
        run: pip install -r requirements.txt

      - name: Check if any new games are available
        id: check-new
        shell: python
        run: |
          import os
          import duckdb

          conn = duckdb.connect('md:')

          game_ids = conn.sql("""
              SELECT DISTINCT
                  gameID
              FROM skater_games
              WHERE
                  season = 2025;
          """).pl()

          game_ids_list = list(game_ids.sort(by=['gameID'], descending=False)['gameID'])

          print(f"Last game reported: {os.environ['LAST_GAME']}")
          print(game_ids_list)

          game_to_report = 0
          for game in game_ids_list:
            print(f"value is {game} with type {type(game)}")
            if int(game) > int(os.environ['LAST_GAME']):
              game_to_report = game
              break

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'game_id={game_to_report}', file=fh)

      - name: Generate chart
        if: ${{ steps.check-new.outputs.game_id != 0}}
        env:
          PYTHONPATH: ${{ github.workspace }}
          GAME_ID: ${{ steps.check-new.outputs.game_id }}
        run: |
          python3 plotting/hockey/game_report/assemble_report.py -g $GAME_ID

      - name: Save chart as artifact
        if: ${{ steps.check-new.outputs.game_id != 0}}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PLOTS_ARTIFACT_NAME }}
          path: ./*png
          retention-days: 1

      - name: Set output for artifact name
        id: set-output
        run: echo "plot_artifact_name=$PLOTS_ARTIFACT_NAME" >> "$GITHUB_OUTPUT"

    outputs:
      game_id: ${{ steps.check-new.outputs.game_id }}
      plot_artifact_name: ${{ steps.set-output.outputs.plot_artifact_name }}
